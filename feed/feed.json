{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Minhee Kim Blog",
  "language": "en",
  "home_page_url": "https://ineeth.com",
  "feed_url": "https://ineeth.com/feed/feed.json",
  "description": "A blog about daily life, hobbies, and the pursuit of knowledge. I share stories, tutorials, and reflections on creativity and growth, with a focus on learning and exploring new ideas.",
  "author": {
    "name": "Minhee Kim",
    "url": "https://ineeth.com"
  },
  "items": [{
      "id": "https://ineeth.com/posts/20241013_book/",
      "url": "https://ineeth.com/posts/20241013_book/",
      "title": "&#39;Kim Ji-young, Born 1982&#39; / Novel by Cho Nam-joo / Minumsa",
      "content_html": "<h2 id=\"introduction\">Introduction <a class=\"direct-link\" href=\"#introduction\">#</a></h2>\n<p>When I asked my friends what books they were currently reading, I heard the title <em>Kim Ji-young, Born 1982</em> mentioned a couple of times. Coincidentally, all the friends who mentioned it were women, and their reactions were consistent: “I got so angry while reading that I cried” or “I wanted to throw the book across the room.”</p>\n<p>Curious about the content, I asked them what it was about, and they replied, “It’s the story of women in South Korea.” I wondered why it made them feel so frustrated and emotional.</p>\n<h2 id=\"awakening-to-reality\">Awakening to Reality <a class=\"direct-link\" href=\"#awakening-to-reality\">#</a></h2>\n<p>Before reading this book, I had never deeply considered what it meant to live as a woman. I was somewhat oblivious to the issues present in society. As I progressed through the chapters, I, too, felt a surge of emotions, becoming heated and overwhelmed, leading to tears. Upon finishing the book, I was struck by the realization of my own ingrained beliefs and stereotypes, which left me in shock and awakened my consciousness.</p>\n<h2 id=\"structure-and-content\">Structure and Content <a class=\"direct-link\" href=\"#structure-and-content\">#</a></h2>\n<p>The structure of the book is intriguing. It is divided into six sections, starting with &quot;Autumn 2015.&quot; The narrative begins in a calm, observational tone, evoking vivid imagery as it describes 34-year-old Kim Ji-young, who got married three years ago, had a daughter, and lives with her husband, Jung Dae-hyun, in a 24-pyeong apartment on the outskirts of Seoul. This section introduces the strange symptoms she begins to experience.</p>\n<h3 id=\"1982---1994\">1982 - 1994 <a class=\"direct-link\" href=\"#1982---1994\">#</a></h3>\n<p>This section delves into Kim Ji-young’s early years, from her birth to elementary school. It recounts the scars left by a culture that favors sons and reflects on the saying, “Filial piety is self-service,” emphasizing the sacrifices expected from mothers or women. It also explores the reactions of those around her after she attempts to voice her feelings.</p>\n<p>When Kim Ji-young was in elementary school, her teacher wrote a brief note in her diary. One day, while staring at it, her mother suddenly said, “I also wanted to be a teacher.” Kim Ji-young, who had only known her mother as a mother, found this hard to believe and laughed.</p>\n<p>“Really? When you were in elementary school, you studied better than the eldest uncle.”<br>\n“Then why didn’t you become a teacher?”<br>\n“Because I had to earn money to send your brothers to school. That was how all women lived back then.”<br>\n“Then you can become a teacher now.”<br>\n“Now, I have to earn money to send you to school. That’s how it is for all mothers these days.”</p>\n<h3 id=\"1995---2000\">1995 - 2000 <a class=\"direct-link\" href=\"#1995---2000\">#</a></h3>\n<p>This section covers her middle school years, marking the onset of puberty and the discrimination and harassment she faces, along with the added burden of responsibility as a victim. The onset of the IMF crisis brings about significant family decisions and struggles.</p>\n<p>In one memorable scene, a group of girls confronts a flasher one morning in an alley. They band together, using their belts and clotheslines to tie him up and drag him to the local police station. However, no one knows what happened at the station or what became of the flasher. Afterward, he disappears, but the five girls face consequences, forced to write letters of reflection and clean the playground and restrooms, enduring the scorn of their teachers, who berate them for bringing shame upon the school.</p>\n<p>“Girls should be embarrassed; it’s disgraceful. Such a shame.”</p>\n<h3 id=\"2001---2011\">2001 - 2011 <a class=\"direct-link\" href=\"#2001---2011\">#</a></h3>\n<p>This section depicts adulthood, covering university life and the workplace, highlighting deeply rooted gender discrimination. Despite the importance of career opportunities, women face narrower pathways compared to men, and those who manage to break through encounter even more barriers.</p>\n<p>One senior student demanded transparency regarding the selection criteria from their professor, threatening to make it a public issue if not satisfied with the explanation. Some professors justified the discrepancies with comments suggesting that companies prefer male students, viewing military service as a compensatory factor, and implying that male students would eventually become family breadwinners. The most disheartening response came from the department head:<br>\n“If women are too smart, it becomes a burden for the company. Do you know how burdensome it is to be a student?”</p>\n<h3 id=\"2012---2015\">2012 - 2015 <a class=\"direct-link\" href=\"#2012---2015\">#</a></h3>\n<p>This section begins with discussions about engagement ceremonies, wedding preparations, family planning, childbirth, and the challenges of re-entering the workforce (which often means part-time jobs). It reveals the difficulties faced, especially under the derogatory term “momchung,” reflecting how overwhelming it feels to be under constant pressure with little support.</p>\n<h3 id=\"2016\">2016 <a class=\"direct-link\" href=\"#2016\">#</a></h3>\n<p>In the final section, a new character appears: a psychiatrist who treats Kim Ji-young. His perspective briefly highlights women’s issues through a male lens. The final chapter is shocking and chaotic, leaving me confused for about two days. I felt a strange sense of normalization towards the doctor’s thoughts and judgments, which left me unsettled. As I reflected, I realized that, despite being a woman, I had internalized societal inequalities and lost my voice.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>I recognized this realization but was at a loss about where to start or what to do next. Many sleepless nights lie ahead filled with contemplation.</p>\n<p>Gender-related conflicts have been increasingly prevalent lately. This book illustrates that the struggles of women are not solely caused by men but stem from the pervasive societal perceptions that exist. Immediately after finishing the book, I became curious about how men perceive it and what feelings it evokes in them.</p>\n<p>Most reviews I found were written by women, so I plan to seek out more perspectives. I hope that others who read this book will also recognize that they, too, might be living without their voices.</p>\n<p>I want to become someone who speaks truthfully and firmly!</p>\n",
      "date_published": "2017-04-23T00:00:00Z"
    },{
      "id": "https://ineeth.com/posts/20240930webp/",
      "url": "https://ineeth.com/posts/20240930webp/",
      "title": "The Pros and Cons of Using WebP for Blog Images",
      "content_html": "<h1 id=\"the-pros-and-cons-of-using-webp-for-blog-images\">The Pros and Cons of Using WebP for Blog Images <a class=\"direct-link\" href=\"#the-pros-and-cons-of-using-webp-for-blog-images\">#</a></h1>\n<p>When managing a blog, choosing the right image format is crucial for improving <strong>page load speed</strong>, <strong>user experience</strong>, and even <strong>SEO performance</strong>. One of the newer image formats emerging in web development is <strong>WebP</strong>, a format developed by <strong>Google</strong> to provide both <strong>lossy</strong> and <strong>lossless</strong> compression.</p>\n<p>This blog post will explore the <strong>advantages and disadvantages of using WebP</strong> images for blogs. We'll compare WebP to other common formats like JPEG, PNG, and GIF, and also take a look at how widely WebP is being adopted across the web.</p>\n<hr>\n<h2 id=\"1.-what-is-webp%2C-and-how-widely-is-it-used%3F\">1. What is WebP, and How Widely is it Used? <a class=\"direct-link\" href=\"#1.-what-is-webp%2C-and-how-widely-is-it-used%3F\">#</a></h2>\n<p>WebP is an <strong>image format introduced by Google in 2010</strong>, designed to offer a more efficient way to compress images without sacrificing quality. The format is based on the <strong>VP8 video codec</strong> and provides both lossy and lossless compression options.</p>\n<p>WebP stands out due to its <strong>smaller file sizes</strong>, which are typically much smaller than traditional formats like <strong>JPEG</strong>, <strong>PNG</strong>, and <strong>GIF</strong>. It also supports <strong>alpha transparency</strong> (like PNG) and <strong>animation</strong> (like GIF), making it highly versatile.</p>\n<h3 id=\"growing-popularity\">Growing Popularity <a class=\"direct-link\" href=\"#growing-popularity\">#</a></h3>\n<p>Since its inception, WebP has gained significant traction. As of 2024, it is supported by all major web browsers, including <strong>Chrome</strong>, <strong>Safari</strong>, <strong>Firefox</strong>, and <strong>Edge</strong>. According to Google's advocacy for WebP, the format is now used by many high-traffic websites to optimize performance, including <strong>e-commerce platforms</strong>, <strong>news outlets</strong>, and <strong>content-heavy blogs</strong>.</p>\n<hr>\n<h2 id=\"2.-advantages-of-using-webp\">2. Advantages of Using WebP <a class=\"direct-link\" href=\"#2.-advantages-of-using-webp\">#</a></h2>\n<h3 id=\"1)-smaller-file-sizes\">1) <strong>Smaller File Sizes</strong> <a class=\"direct-link\" href=\"#1)-smaller-file-sizes\">#</a></h3>\n<p>One of WebP's most attractive features is its ability to <strong>reduce file size</strong> dramatically without a noticeable loss in quality. In fact, WebP can provide a <strong>25–34% reduction</strong> in file size compared to JPEG images of similar quality.</p>\n<p>Smaller images mean:</p>\n<ul>\n<li>Faster <strong>page load times</strong>,</li>\n<li>Improved <strong>mobile performance</strong>,</li>\n<li>Reduced <strong>bandwidth usage</strong>, which can be crucial for users with limited internet data.</li>\n</ul>\n<h3 id=\"2)-lossy-and-lossless-compression\">2) <strong>Lossy and Lossless Compression</strong> <a class=\"direct-link\" href=\"#2)-lossy-and-lossless-compression\">#</a></h3>\n<p>WebP offers both <strong>lossy</strong> and <strong>lossless</strong> compression modes. This flexibility allows designers and developers to select the right compression based on their needs:</p>\n<ul>\n<li><strong>Lossy compression</strong>: Prioritizes reducing file size, ideal for images where minor quality loss is acceptable.</li>\n<li><strong>Lossless compression</strong>: Maintains perfect image fidelity, suitable for graphic elements or high-resolution photos.</li>\n</ul>\n<h3 id=\"3)-transparency-(alpha-channel)-support\">3) <strong>Transparency (Alpha Channel) Support</strong> <a class=\"direct-link\" href=\"#3)-transparency-(alpha-channel)-support\">#</a></h3>\n<p>WebP supports <strong>transparent backgrounds</strong> similar to <strong>PNG</strong>, but with a significant advantage: transparent WebP images are <strong>up to 26% smaller</strong> than their PNG counterparts. This makes WebP a great choice for <strong>logos</strong>, <strong>icons</strong>, and other elements that require transparency without sacrificing quality.</p>\n<h3 id=\"4)-animation-capabilities\">4) <strong>Animation Capabilities</strong> <a class=\"direct-link\" href=\"#4)-animation-capabilities\">#</a></h3>\n<p>WebP also supports <strong>animated images</strong>, similar to <strong>GIFs</strong>, but at a much smaller size. In fact, animated WebP images can be <strong>64% smaller</strong> than GIFs. This is particularly useful for blogs or websites that use <strong>memes</strong>, <strong>animated banners</strong>, or <strong>small video clips</strong>.</p>\n<hr>\n<h2 id=\"3.-disadvantages-of-using-webp\">3. Disadvantages of Using WebP <a class=\"direct-link\" href=\"#3.-disadvantages-of-using-webp\">#</a></h2>\n<h3 id=\"1)-browser-compatibility\">1) <strong>Browser Compatibility</strong> <a class=\"direct-link\" href=\"#1)-browser-compatibility\">#</a></h3>\n<p>While WebP is widely supported today, <strong>older browsers</strong> (such as <strong>Internet Explorer</strong>) do not support the format. To ensure compatibility across all platforms, developers must provide <strong>fallback formats</strong> like <strong>JPEG</strong> or <strong>PNG</strong> to display images in browsers that do not support WebP.</p>\n<h3 id=\"2)-conversion-and-tooling-challenges\">2) <strong>Conversion and Tooling Challenges</strong> <a class=\"direct-link\" href=\"#2)-conversion-and-tooling-challenges\">#</a></h3>\n<p>Despite WebP's advantages, not all image-editing software supports the format natively. Some tools may require <strong>additional plugins</strong> or converters to handle WebP images. This can slow down workflow for developers or designers who regularly edit and modify images.</p>\n<h3 id=\"3)-potential-image-quality-loss\">3) <strong>Potential Image Quality Loss</strong> <a class=\"direct-link\" href=\"#3)-potential-image-quality-loss\">#</a></h3>\n<p>For images that require <strong>high-resolution details</strong>, using WebP's <strong>lossy compression</strong> can sometimes result in <strong>noticeable quality degradation</strong> compared to PNG or JPEG. Fine details, textures, and color transitions can be lost, so it's essential to choose the right compression settings based on the image content.</p>\n<hr>\n<h2 id=\"4.-comparison-of-webp-with-other-formats\">4. Comparison of WebP with Other Formats <a class=\"direct-link\" href=\"#4.-comparison-of-webp-with-other-formats\">#</a></h2>\n<p>Let’s take a closer look at how WebP stacks up against other common image formats:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Image Format</strong></th>\n<th><strong>File Size</strong></th>\n<th><strong>Compression Type</strong></th>\n<th><strong>Transparency</strong></th>\n<th><strong>Animation</strong></th>\n<th><strong>Best Use Cases</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>JPEG</strong></td>\n<td>Medium</td>\n<td>Lossy</td>\n<td>No</td>\n<td>No</td>\n<td>Photographs, complex images</td>\n</tr>\n<tr>\n<td><strong>PNG</strong></td>\n<td>Large</td>\n<td>Lossless</td>\n<td>Yes</td>\n<td>No</td>\n<td>Graphics, logos, icons</td>\n</tr>\n<tr>\n<td><strong>GIF</strong></td>\n<td>Large</td>\n<td>Lossless</td>\n<td>No</td>\n<td>Yes</td>\n<td>Simple animations, low-color images</td>\n</tr>\n<tr>\n<td><strong>WebP</strong></td>\n<td>Small</td>\n<td>Lossy &amp; Lossless</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>All-in-one (photos, graphics, animations)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"key-takeaways%3A\">Key Takeaways: <a class=\"direct-link\" href=\"#key-takeaways%3A\">#</a></h3>\n<ul>\n<li><strong>JPEG</strong> excels at compressing photographs but doesn't support transparency.</li>\n<li><strong>PNG</strong> offers lossless compression and transparency but results in larger file sizes.</li>\n<li><strong>GIF</strong> is limited by its color palette and large file sizes for animation.</li>\n<li><strong>WebP</strong> offers <strong>all-in-one capabilities</strong> (transparency, animation, lossy/lossless compression) with much smaller file sizes.</li>\n</ul>\n<hr>\n<h2 id=\"5.-adoption-trends-for-webp\">5. Adoption Trends for WebP <a class=\"direct-link\" href=\"#5.-adoption-trends-for-webp\">#</a></h2>\n<p>WebP's adoption has been steadily growing since its introduction in 2010. Early adoption was slow due to <strong>compatibility issues</strong> and <strong>limited tool support</strong>, but WebP is now widely accepted. Google actively promotes WebP in tools like <strong>PageSpeed Insights</strong> and <strong>Google Lighthouse</strong>, recommending it as a best practice for optimizing website performance.</p>\n<h3 id=\"industry-usage\">Industry Usage <a class=\"direct-link\" href=\"#industry-usage\">#</a></h3>\n<p>Leading tech companies and platforms, such as <strong>YouTube</strong>, <strong>Facebook</strong>, and <strong>Amazon</strong>, have adopted WebP as their default image format due to its efficiency in saving bandwidth and improving page load speeds. Many <strong>WordPress</strong> plugins and <strong>CMS platforms</strong> now provide built-in WebP support.</p>\n<hr>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>WebP is a game-changing image format that strikes an ideal balance between <strong>small file sizes</strong> and <strong>image quality</strong>. While it’s still necessary to consider <strong>fallback formats</strong> for older browsers, WebP offers significant advantages over traditional formats like <strong>JPEG</strong>, <strong>PNG</strong>, and <strong>GIF</strong>. Whether you’re focused on <strong>speeding up page load times</strong>, reducing <strong>bandwidth usage</strong>, or optimizing images for <strong>mobile devices</strong>, WebP is becoming an essential tool in the web developer's arsenal.</p>\n<p>For blogs and websites looking to improve performance without sacrificing quality, <strong>WebP</strong> is a format worth adopting.</p>\n",
      "date_published": "2024-09-30T00:00:00Z"
    },{
      "id": "https://ineeth.com/posts/20241004_11ty/",
      "url": "https://ineeth.com/posts/20241004_11ty/",
      "title": "Why I Switched from Jekyll to 11ty",
      "content_html": "<h1 id=\"why-i-switched-from-jekyll-to-11ty\">Why I Switched from Jekyll to 11ty <a class=\"direct-link\" href=\"#why-i-switched-from-jekyll-to-11ty\">#</a></h1>\n<h2 id=\"1.-comparing-the-basics-of-jekyll-and-11ty\">1. Comparing the Basics of Jekyll and 11ty <a class=\"direct-link\" href=\"#1.-comparing-the-basics-of-jekyll-and-11ty\">#</a></h2>\n<p>Jekyll and 11ty are both static site generators that help build websites quickly and efficiently. However, they differ greatly in philosophy and usage.</p>\n<ul>\n<li><strong>Jekyll</strong> is Ruby-based and is natively supported by GitHub Pages. It has long been a dominant player in the static site generator space, offering a wide range of plugins and themes that make it easy to get started.</li>\n<li><strong>11ty</strong>, on the other hand, is a newer, JavaScript-based static site generator. While it’s relatively young, it’s gaining attention for being flexible, fast, and seamlessly integrating with the JavaScript ecosystem.</li>\n</ul>\n<p>After comparing the two, I decided to switch to <strong>11ty</strong> to better meet my needs and suit my development environment.</p>\n<h2 id=\"2.-challenges-faced-when-switching-from-jekyll-to-11ty\">2. Challenges Faced When Switching from Jekyll to 11ty <a class=\"direct-link\" href=\"#2.-challenges-faced-when-switching-from-jekyll-to-11ty\">#</a></h2>\n<p>One of the most significant challenges I faced during the switch was <strong>adapting to a different ecosystem</strong>. Since Jekyll is Ruby-based, transitioning to the JavaScript-based 11ty involved a learning curve. Specifically, I had to <strong>replace or find alternatives</strong> for the <strong>Jekyll plugins and themes</strong> I had previously relied on.</p>\n<p>Additionally, 11ty is much more flexible in terms of <strong>directory and template structure</strong>, which meant I had to define a lot of the structure myself. While this flexibility is a benefit, it added a level of complexity compared to Jekyll, where many things are pre-configured. Some tasks that were straightforward in Jekyll required manual configuration in 11ty.</p>\n<h2 id=\"3.-speed-improvements-with-11ty-compared-to-jekyll\">3. Speed Improvements with 11ty Compared to Jekyll <a class=\"direct-link\" href=\"#3.-speed-improvements-with-11ty-compared-to-jekyll\">#</a></h2>\n<p>The most noticeable improvement after switching to 11ty was the <strong>build speed</strong>. With Jekyll, as the number of posts or images increased, so did the build time. In some cases, Jekyll took several minutes to build a large site, and I had to optimize it with plugins and additional configurations.</p>\n<p>In contrast, <strong>11ty builds are incredibly fast</strong>. Even with dozens of posts, <strong>build times were reduced to just a few seconds</strong>, significantly speeding up my workflow. Since 11ty is JavaScript-based, it also integrates more naturally with client-side scripts, making the entire development process more efficient.</p>\n<p>This difference in performance was so tangible that it reinforced my decision to switch to 11ty.</p>\n<h2 id=\"4.-dependencies-and-customization\">4. Dependencies and Customization <a class=\"direct-link\" href=\"#4.-dependencies-and-customization\">#</a></h2>\n<p>Jekyll manages plugins and themes via Ruby Gems, which can be cumbersome for those unfamiliar with the Ruby ecosystem. I often encountered dependency issues and conflicts that took time to resolve, slowing down the development process.</p>\n<p>On the other hand, <strong>11ty’s JavaScript (Node.js) ecosystem</strong> made adding plugins and customizing configurations much easier. Since I’m more comfortable with JavaScript, integrating the necessary tools was straightforward and intuitive. Additionally, <strong>11ty’s framework-agnostic design</strong> gave me the freedom to structure my files and directories as I saw fit, enhancing my control over the site’s architecture.</p>\n<h2 id=\"5.-the-benefits-and-growth-potential-of-11ty\">5. The Benefits and Growth Potential of 11ty <a class=\"direct-link\" href=\"#5.-the-benefits-and-growth-potential-of-11ty\">#</a></h2>\n<p>Jekyll has been a reliable static site generator for years, but in recent times, its development has slowed. In contrast, <strong>11ty’s rapidly growing community</strong> and active development offer exciting potential for future features and improvements. The integration with the JavaScript ecosystem means there’s a wealth of resources and tools available that can be used to enhance my projects.</p>\n<p>One of 11ty’s other standout features is its <strong>support for multiple templating engines</strong>. While I primarily use Nunjucks, I appreciate the ability to switch to Liquid, Handlebars, or other engines as needed, which adds flexibility and efficiency to my workflow.</p>\n<h2 id=\"6.-conclusion\">6. Conclusion <a class=\"direct-link\" href=\"#6.-conclusion\">#</a></h2>\n<p>Ultimately, I made the switch from Jekyll to 11ty for its <strong>speed, flexibility, and compatibility with JavaScript</strong>. While Jekyll is still a fantastic tool, I needed a solution that better aligned with my development preferences and project requirements. The seamless integration with the JavaScript ecosystem was a critical factor for me as a frontend developer.</p>\n<p><strong>The switch from Jekyll to 11ty</strong> has improved my workflow, provided a more flexible development environment, and I’m excited to continue expanding my blog using 11ty as it evolves in the future.</p>\n",
      "date_published": "2024-10-04T00:00:00Z"
    },{
      "id": "https://ineeth.com/posts/20241012_/",
      "url": "https://ineeth.com/posts/20241012_/",
      "title": "Creating a Blog with 11ty: A Simple Step-by-Step Guide",
      "content_html": "<h1 id=\"creating-a-blog-with-11ty%3A-a-simple-step-by-step-guide\">Creating a Blog with 11ty: A Simple Step-by-Step Guide <a class=\"direct-link\" href=\"#creating-a-blog-with-11ty%3A-a-simple-step-by-step-guide\">#</a></h1>\n<p><strong>An easy guide for beginners to build modern static blogs using 11ty</strong></p>\n<p><img src=\"https://www.11ty.dev/img/logo-github.svg\" alt=\"11ty Logo\"></p>\n<p>If you're looking to create a blog that is fast, lightweight, and easy to customize, 11ty (Eleventy) might be the perfect fit. Unlike heavier frameworks, 11ty focuses on simplicity and efficiency. This guide will help you build your own 11ty blog step-by-step, whether you’re new to static site generators or switching from another platform.</p>\n<hr>\n<h2 id=\"why-use-11ty%3F\">Why Use 11ty? <a class=\"direct-link\" href=\"#why-use-11ty%3F\">#</a></h2>\n<p>Here are a few reasons why developers love 11ty:</p>\n<ul>\n<li><strong>No configuration needed</strong>: Comes with sensible defaults.</li>\n<li><strong>Templating freedom</strong>: Supports HTML, Markdown, Nunjucks, and more.</li>\n<li><strong>Fast performance</strong>: Static files load instantly.</li>\n<li><strong>Highly customizable</strong>: Design and structure are fully in your hands.</li>\n</ul>\n<p>Now, let’s dive into the steps to create your blog.</p>\n<hr>\n<h2 id=\"prerequisites\">Prerequisites <a class=\"direct-link\" href=\"#prerequisites\">#</a></h2>\n<p>Ensure you have the following ready before starting:</p>\n<ol>\n<li><strong>Node.js</strong> and <strong>npm</strong> installed.</li>\n<li>A text editor (like VS Code).</li>\n<li>Command line/terminal access.</li>\n<li>Basic knowledge of HTML and Markdown.</li>\n</ol>\n<hr>\n<h2 id=\"step-1%3A-install-11ty\">Step 1: Install 11ty <a class=\"direct-link\" href=\"#step-1%3A-install-11ty\">#</a></h2>\n<p>Run this command to install 11ty globally on your machine:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> @11ty/eleventy</code></pre>\n<p>Once installed, verify the installation:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">eleventy <span class=\"token parameter variable\">--version</span></code></pre>\n<h2 id=\"step-2%3A-set-up-your-project\">Step 2: Set Up Your Project <a class=\"direct-link\" href=\"#step-2%3A-set-up-your-project\">#</a></h2>\n<p>Create a new folder for your blog and move into it:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> my-eleventy-blog<br><span class=\"token builtin class-name\">cd</span> my-eleventy-blog</code></pre>\n<p>Next, initialize the project with a <code>package.json</code> file:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span></code></pre>\n<h2 id=\"step-3%3A-install-11ty-locally\">Step 3: Install 11ty Locally <a class=\"direct-link\" href=\"#step-3%3A-install-11ty-locally\">#</a></h2>\n<p>To manage dependencies within your project, install 11ty locally:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @11ty/eleventy --save-dev</code></pre>\n<p>Add the following scripts to your <code>package.json</code>:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eleventy --serve\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eleventy\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"step-4%3A-create-your-first-blog-post\">Step 4: Create Your First Blog Post <a class=\"direct-link\" href=\"#step-4%3A-create-your-first-blog-post\">#</a></h2>\n<p>Create a directory to hold your posts:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> posts</code></pre>\n<p>Inside that directory, create your first post using Markdown:</p>\n<p><strong>posts/first-post.md</strong>:</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span><br><span class=\"token front-matter yaml language-yaml\">title: \"My First Blog Post\"<br>date: 2024-10-12<br>tags: [\"blog\", \"first-post\"]</span><br><span class=\"token punctuation\">---</span></span><br><br><span class=\"token title important\"><span class=\"token punctuation\">#</span> My First Blog Post  </span><br>Welcome to my first post using 11ty! I'm excited to start this blogging journey.</code></pre>\n<h2 id=\"step-5%3A-configure-11ty\">Step 5: Configure 11ty <a class=\"direct-link\" href=\"#step-5%3A-configure-11ty\">#</a></h2>\n<p>Create a <code>.eleventy.js</code> configuration file at the root of your project:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eleventyConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token literal-property property\">dir</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> <span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_site\"</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This tells 11ty to generate files from the <code>posts</code> folder into the <code>_site</code> directory.</p>\n<h2 id=\"step-6%3A-run-your-blog-locally\">Step 6: Run Your Blog Locally <a class=\"direct-link\" href=\"#step-6%3A-run-your-blog-locally\">#</a></h2>\n<p>Use this command to start the 11ty development server:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run start</code></pre>\n<p>Open your browser and go to <a href=\"http://localhost:8080\">http://localhost:8080</a> to see your post live!</p>\n<h2 id=\"step-7%3A-add-some-styling\">Step 7: Add Some Styling <a class=\"direct-link\" href=\"#step-7%3A-add-some-styling\">#</a></h2>\n<p>Create a CSS file to style your blog:</p>\n<p><strong>css/styles.css</strong>:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f4f4f4<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Include the CSS file in your layout template:</p>\n<p><strong>_includes/layout.njk</strong>:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/css/styles.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Creating a Blog with 11ty: A Simple Step-by-Step Guide<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Creating a Blog with 11ty: A Simple Step-by-Step Guide<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span><br>    <br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"step-8%3A-build-for-production\">Step 8: Build for Production <a class=\"direct-link\" href=\"#step-8%3A-build-for-production\">#</a></h2>\n<p>When you're ready to deploy your blog, run:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run build</code></pre>\n<p>This command generates your static site in the <code>_site</code> folder.</p>\n<h2 id=\"step-9%3A-deploy-your-blog\">Step 9: Deploy Your Blog <a class=\"direct-link\" href=\"#step-9%3A-deploy-your-blog\">#</a></h2>\n<p>To deploy with GitHub Pages:</p>\n<ol>\n<li>Push your code to a GitHub repository.</li>\n<li>Enable GitHub Pages in the repository settings.</li>\n<li>Set the source branch to <code>gh-pages</code>.</li>\n</ol>\n<p>Alternatively, deploy with Netlify:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> netlify-cli<br>netlify deploy</code></pre>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>Congratulations! You've successfully built a blog with 11ty. This setup offers incredible flexibility and performance without unnecessary complexity. Explore 11ty's advanced features, such as pagination and custom collections, to enhance your blog even further.</p>\n",
      "date_published": "2024-10-12T00:00:00Z"
    },{
      "id": "https://ineeth.com/posts/20241013_/",
      "url": "https://ineeth.com/posts/20241013_/",
      "title": "Deploying Your 11ty Blog on GitHub Pages: A Complete Guide",
      "content_html": "<h1 id=\"deploying-your-11ty-blog-on-github-pages%3A-a-full-guide\">Deploying Your 11ty Blog on GitHub Pages: A Full Guide <a class=\"direct-link\" href=\"#deploying-your-11ty-blog-on-github-pages%3A-a-full-guide\">#</a></h1>\n<p><strong>Easily deploy your 11ty blog to GitHub Pages and share your content with the world..</strong></p>\n<p>Until now, creating an 11ty static blog was just the beginning. Now, you will need to deploy it so that everyone can see it online. One of the easiest ways to do that in this modern world is through <strong>GitHub Pages</strong>; it will host your static website for free. I'll take you through the whole deployment process for the 11ty blog on GitHub Pages here.</p>\n<hr>\n<h2 id=\"prerequisites\">Prerequisites <a class=\"direct-link\" href=\"#prerequisites\">#</a></h2>\n<p>Before getting started, ensure you have the following:</p>\n<ol>\n<li><strong>A GitHub account</strong></li>\n<li><strong>Git installed</strong> on your computer</li>\n<li>An existing <strong>11ty blog project</strong></li>\n</ol>\n<hr>\n<h2 id=\"step-1%3A-initialize-a-local-git-repository\">Step 1: Initialize a Local Git Repository <a class=\"direct-link\" href=\"#step-1%3A-initialize-a-local-git-repository\">#</a></h2>\n<p>If you haven't already, navigate to your 11ty project folder and initialize a local Git repository:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> my-eleventy-blog<br><span class=\"token function\">git</span> init</code></pre>\n<p>Add all your files to the repository and commit them:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><br><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for 11ty blog\"</span></code></pre>\n<hr>\n<h2 id=\"step-2%3A-create-a-new-github-repository\">Step 2: Create a New GitHub Repository <a class=\"direct-link\" href=\"#step-2%3A-create-a-new-github-repository\">#</a></h2>\n<ol>\n<li>Go to <a href=\"https://github.com\">GitHub</a> and log into your account.</li>\n<li>Click on the <strong>New</strong> button to create a new repository.</li>\n<li>Name your repository (e.g., <code>my-eleventy-blog</code>). You can leave it public or private.</li>\n<li>Do <strong>not</strong> select &quot;Initialize this repository with a README&quot; since your local repository already contains files.</li>\n</ol>\n<p>Copy the repository’s <strong>remote URL</strong> (e.g., <code>https://github.com/your-username/my-eleventy-blog.git</code>).</p>\n<hr>\n<h2 id=\"step-3%3A-link-your-local-repository-to-github\">Step 3: Link Your Local Repository to GitHub <a class=\"direct-link\" href=\"#step-3%3A-link-your-local-repository-to-github\">#</a></h2>\n<p>Back in your terminal, link your local repository to the new GitHub repository:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/your-username/my-eleventy-blog.git</code></pre>\n<p>Push your local commits to GitHub:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main</code></pre>\n<hr>\n<h2 id=\"step-4%3A-configuring-github-pages\">Step 4: Configuring GitHub Pages <a class=\"direct-link\" href=\"#step-4%3A-configuring-github-pages\">#</a></h2>\n<ol>\n<li>In your repository in GitHub, click the <strong>Settings</strong> tab.</li>\n<li>Scroll down to <strong>Pages</strong> in the left sidebar.</li>\n<li>Under &quot;Source,&quot; select <strong>Deploy from branch</strong>.</li>\n<li>Choose the <strong>main</strong> branch and <code>/ (root)</code> as the folder.</li>\n<li>Click <strong>Save</strong> and this will enable GitHub Pages.</li>\n</ol>\n<p>Within a few minutes, your blog will be ready at <code>https://your-username.github.io/my-eleventy-blog/</code>.</p>\n<hr>\n<h2 id=\"step-5%3A-create-a-gh-pages-branch-(optional)\">Step 5: Create a <code>gh-pages</code> Branch (Optional) <a class=\"direct-link\" href=\"#step-5%3A-create-a-gh-pages-branch-(optional)\">#</a></h2>\n<p>You may want to create a dedicated <code>gh-pages</code> branch for cleaner deployments. Execute the following command:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> gh-pages<br><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span><br><span class=\"token function\">git</span> commit --allow-empty <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for gh-pages\"</span><br><span class=\"token function\">git</span> push origin gh-pages</code></pre>\n<p>Changing in <strong>GitHub Pages settings</strong>, source should point to the gh-pages branch.</p>\n<hr>\n<h2 id=\"step-6%3A-automate-deployments-with-github-actions\">Step 6: Automate Deployments with GitHub Actions <a class=\"direct-link\" href=\"#step-6%3A-automate-deployments-with-github-actions\">#</a></h2>\n<p>To automatically publish your blog whenever you push changes, a GitHub Actions workflow should be created:</p>\n<ol>\n<li>In your project directory, create <code>.github/workflows/deploy.yml</code>.</li>\n<li>Add the following configurations:</li>\n</ol>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy 11ty Blog<br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> main<br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build-deploy</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest<br>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2<br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Node.js<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">14</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install<br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build<br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GitHub Pages<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<br>          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site</code></pre>\n<p>Commit and push the new workflow:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> .github/workflows/deploy.yml<br><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Add GitHub Actions workflow for deployment\"</span><br><span class=\"token function\">git</span> push origin main</code></pre>\n<p>Now, with this setup, any time changes are pushed to the main branch, your blog will automatically deploy.</p>\n<hr>\n<h2 id=\"step-7%3A-troubleshooting-deployment-issues\">Step 7: Troubleshooting Deployment Issues <a class=\"direct-link\" href=\"#step-7%3A-troubleshooting-deployment-issues\">#</a></h2>\n<p>If you don't see your site, try the following:</p>\n<ul>\n<li><strong>Clear the cache</strong> in your browser.</li>\n<li>Make sure <strong>GitHub Pages</strong> is configured in the repository settings.</li>\n<li>In GitHub, verify that the <strong>Actions logs</strong> show that the deployment workflow completed without errors.</li>\n</ul>\n<hr>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>Woohoo! Your 11ty blog is now live with GitHub Pages! GitHub Pages is a great place to publish your content because GitHub Pages deploys automatically and hosting is free. Now you can focus on creating great content, and explore the rest of the features in 11ty.</p>\n",
      "date_published": "2024-10-13T00:00:00Z"
    },{
      "id": "https://ineeth.com/posts/20241014_/",
      "url": "https://ineeth.com/posts/20241014_/",
      "title": "Efficiently Convert Images to WebP Format: My Journey in Developing an Image Converter",
      "content_html": "<h1 id=\"introduction-to-my-image-converter\">Introduction to My Image Converter <a class=\"direct-link\" href=\"#introduction-to-my-image-converter\">#</a></h1>\n<p>Hello everyone! In this post, I would like to introduce the image converter I developed, share my experiences during the development process, and outline my plans for future improvements.</p>\n<p>This project is based on React and is designed to allow users to easily convert JPEG or PNG files into the WebP format. WebP is an image format that provides excellent compression and quality, making it useful for optimizing websites.</p>\n<h2 id=\"web-image-converter-project---webp-converter-built-with-react\">Web Image Converter Project - WebP Converter Built with React <a class=\"direct-link\" href=\"#web-image-converter-project---webp-converter-built-with-react\">#</a></h2>\n<p><a href=\"https://imgtowebp.honeybam.com/\">https://imgtowebp.honeybam.com/</a><br>\nConvert your images to WEBP format quickly and easily. Free online tool for image conversion supporting multiple formats.</p>\n<h2 id=\"project-overview-and-motivation\">Project Overview and Motivation <a class=\"direct-link\" href=\"#project-overview-and-motivation\">#</a></h2>\n<p>The motivation behind developing the image converter was to enable more efficient image management in web environments. Specifically, WebP can reduce file sizes compared to JPEG or PNG, improving page loading speeds and enhancing user experience. This project started as a simple idea, but as I progressed with development, I was able to solve various problems and enhance its features.</p>\n<h2 id=\"key-features\">Key Features <a class=\"direct-link\" href=\"#key-features\">#</a></h2>\n<h3 id=\"multiple-image-selection-and-upload\">Multiple Image Selection and Upload <a class=\"direct-link\" href=\"#multiple-image-selection-and-upload\">#</a></h3>\n<p>Users can upload multiple JPEG or PNG files at once. A list of selected files is displayed on the screen, allowing users to review the files before executing the conversion.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>files<span class=\"token punctuation\">,</span> setFiles<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>webpUrls<span class=\"token punctuation\">,</span> setWebpUrls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"conversion-to-webp\">Conversion to WebP <a class=\"direct-link\" href=\"#conversion-to-webp\">#</a></h3>\n<p>When the user clicks the button for each file, the conversion begins. The <code>canvas.toBlob()</code> method is used to generate high-quality WebP images without loss. Once the conversion is complete, a download button is displayed, enabling users to easily download the converted images.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span><br>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">const</span> webpUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token function\">setWebpUrls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevUrls</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prevUrls<span class=\"token punctuation\">,</span> webpUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token string\">\"image/webp\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">quality</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"batch-conversion-and-download\">Batch Conversion and Download <a class=\"direct-link\" href=\"#batch-conversion-and-download\">#</a></h3>\n<p>If multiple files are selected, users can convert all of them to WebP at once by clicking the &quot;Convert All&quot; button. Once the conversion is complete, users can download all files in bulk using the &quot;Download All&quot; button.</p>\n<h3 id=\"google-adsense-script-management\">Google AdSense Script Management <a class=\"direct-link\" href=\"#google-adsense-script-management\">#</a></h3>\n<p>I efficiently managed the <code>window.adsbygoogle</code> script within the webpage to prevent duplicate ads. This optimization maximizes ad revenue without compromising user experience.</p>\n<h2 id=\"future-improvement-plans\">Future Improvement Plans <a class=\"direct-link\" href=\"#future-improvement-plans\">#</a></h2>\n<ol>\n<li>\n<p><strong>Adding a Progress Bar</strong><br>\nCurrently, the conversion status is provided only as text, but I plan to implement a progress bar to give users a clear view of the progress. This will provide better feedback during the conversion of large images or multiple files.</p>\n</li>\n<li>\n<p><strong>Preview Feature Addition</strong><br>\nI plan to add a feature that allows users to preview the converted images before downloading. This will enable users to quickly check the quality of the converted images and decide whether to re-convert if necessary.</p>\n</li>\n<li>\n<p><strong>Multilingual Support Implementation</strong><br>\nI aim to develop support for multiple languages, including English and Korean, to make the service more accessible to a wider audience. This will help expand the tool into a global service that users from various countries can conveniently use.</p>\n</li>\n</ol>\n<p>During the development process, I encountered several challenges. First, the complexity of state management increased when converting multiple files asynchronously. I solved this by using React's <code>useState</code> to track the conversion status for each file. Secondly, I faced an issue with the Google AdSense script loading multiple times, which I addressed by carefully controlling the script loading within <code>useEffect</code>.</p>\n<p>This project started as a simple image converter, but it has been a valuable experience that made me consider important features for web optimization and user experience improvement. I aim to enhance the tool further by adding the progress bar, preview, and multilingual support.</p>\n<p>I will continue to share my development experiences through this blog, so I appreciate your interest! 😊</p>\n",
      "date_published": "2024-10-14T00:00:00Z"
    }
  ]
}
